import fire
import streamlit as st
import matplotlib as plt
import base64
import numpy as np
import pandas as pd
import seaborn as sns
import plotly_express as px
import plotly.graph_objects as go
from PIL import Image
import requests
from streamlit_option_menu import option_menu
from datetime import datetime
from dateutil.relativedelta import relativedelta
import time
import base64
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import pickle
import requests
from bs4 import BeautifulSoup
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt
import re
import streamlit.components.v1 as components
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from streamlit.components.v1 import iframe

st.set_page_config(page_title="STEAM | DAVID OFICIAL",
        layout="centered",
        page_icon="üéÆ",
        )

# Definici√≥n de la funci√≥n y a√±adimos el fondo de la p√°gina
def add_bg_from_local(image_file):
    with open(image_file, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode()
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("data:image/jpg;base64,{encoded_string}");
            background-size: cover;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

# Llamamos a la funci√≥n
add_bg_from_local("imgs/steamfondo2.jpg")



st.image("imgs/steam_banner.jpg")

# Definir los t√≠tulos de tus opciones de men√∫
menu_options = [
    "Inicio üè†", "An√°lisis inicial üìä", "Gr√°ficos avanzados üìà", "Miner√≠a ‚õèÔ∏è",
    "Serie temporal üìÖ", "Predicci√≥n de √©xito ‚úî", "Predicci√≥n de precio üíµ", "Power BI „ÄΩÔ∏è"
]

# Crear una funci√≥n para generar botones en filas
def generate_menu_in_rows(options, per_row):
    if 'selected_menu_option' not in st.session_state:
        st.session_state['selected_menu_option'] = options[0]  # Establecer "Inicio" como predeterminado
    
    num_rows = len(options) // per_row + (1 if len(options) % per_row else 0)
    for row in range(num_rows):
        cols = st.columns(per_row)
        for idx, col in enumerate(cols):
            option_index = row * per_row + idx
            if option_index < len(options):
                with col:
                    button_key = f"button_{options[option_index]}"
                    if st.button(options[option_index], key=button_key):
                        st.session_state['selected_menu_option'] = options[option_index]

# En el cuerpo principal del script, se llama a la funci√≥n sin necesidad de capturar el valor de retorno
generate_menu_in_rows(menu_options, per_row=4)

# Para mostrar el contenido, verificamos el estado de la sesi√≥n
selected_menu_option = st.session_state['selected_menu_option']

# CONTENT INICIO
if selected_menu_option =="Inicio üè†":
    
    # ¬øQU√â ES STEAM?
    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

    body {
        font-family: 'Roboto', sans-serif;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown("""
                <h2 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>¬øQU√â ES STEAM?</h2>""" ,unsafe_allow_html=True) 
    
    st.markdown(
    """
    <div style="border-bottom-left-radius: 10px; 
    border-bottom-right-radius: 10px; 
    padding: 20px; 
    text-align: justify; 
    background-color: #131720; 
    color: #FFFFFF; 
    font-family: Roboto;">
    Steam  es una plataforma de distribuci√≥n digital de videojuegos desarrollada por Valve Corporation. Fue lanzada en septiembre de 2003 como una forma para Valve de proveer actualizaciones autom√°ticas a sus juegos, pero finalmente se ampli√≥ para incluir juegos de terceros. Steam ofrece protecci√≥n contra pirater√≠a, servidores de emparejamiento, transmisiones de v√≠deo y servicios de redes sociales. </br></br>

    Tambi√©n proporciona al usuario la instalaci√≥n y la actualizaci√≥n autom√°tica de juegos y caracter√≠sticas de comunidad como grupos y listas de amigos, guardado en la nube, voz en el juego y funcionalidad de chat. Se utiliza tanto por peque√±os desarrolladores independientes como grandes corporaciones de software para la distribuci√≥n de videojuegos y material multimedia relacionado.

    Para poder disfrutar de todos estos servicios, es necesario estar registrado en el servicio mediante la creaci√≥n de una cuenta gratuita, a la que se vinculan los videojuegos comprados por el jugador. Estos juegos pueden ser tanto los juegos que se ofrecen para la compra en la propia plataforma como ciertos juegos comprados en tiendas f√≠sicas.
    </div>
    </br></br>
    """, unsafe_allow_html=True)
    
    # PRODUCTOS M√ÅS FAMOSOS
    st.markdown("""
                <h2 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>PRODUCTOS M√ÅS FAMOSOS</h2>
                <h3 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>STEAM CONTROLLER</h3>""" ,unsafe_allow_html=True) 
    
    # Primero, convierte la imagen a base64
    with open("imgs/steam_controller.jpg", "rb") as img_file:
        b64_string = base64.b64encode(img_file.read()).decode()

    # Luego, incluye la imagen en tu bloque de Markdown usando una etiqueta <img>
    st.markdown(f"""
    <div style="border-bottom-left-radius: 10px; 
    border-bottom-right-radius: 10px; 
    padding: 20px; 
    text-align: justify; 
    background-color: #131720; 
    color: #FFFFFF; 
    font-family: Roboto;">
    <img src="data:image/jpeg;base64,{b64_string}" 
    style="border-radius: 10px; 
    display: block; 
    margin-left: auto; 
    margin-right: auto; 
    padding-bottom: 20px">
    Steam Controller te permite jugar tu colecci√≥n de juegos de Steam al completo en tu TV, incluso los dise√±ados sin compatibilidad con mando. Contando con trackpads duales, respuesta h√°ptica en HD, gatillos de doble pulsaci√≥n, botones traseros y plantillas de controles totalmente personalizables, el Steam Controller ofrece un nuevo nivel de control preciso. Encuentra tu configuraci√≥n favorita en la Comunidad Steam, o crea y comparte la tuya propia.
    
    </div>
    </br></br>
    """, unsafe_allow_html=True)
    
    
    st.markdown("""
                <h3 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>STEAM DECK</h3>""" ,unsafe_allow_html=True) 
    
    # Primero, convierte la imagen a base64
    with open("imgs/steamdeck.jpg", "rb") as img_file:
        b64_string = base64.b64encode(img_file.read()).decode()

    # Luego, incluye la imagen en tu bloque de Markdown usando una etiqueta <img>
    st.markdown(f"""
    <div style="border-bottom-left-radius: 10px; 
    border-bottom-right-radius: 10px; 
    padding: 20px; 
    text-align: justify; 
    background-color: #131720; 
    color: #FFFFFF; 
    font-family: Roboto;">
    <img src="data:image/jpeg;base64,{b64_string}" 
    style="border-radius: 10px; 
    display: block; 
    margin-left: auto; 
    margin-right: auto; 
    padding-bottom: 20px;
    width: 450px;
    height: 300px;">
    La Steam Deck es un dispositivo de juego para PC port√°tiles potentes dise√±ados para brindar comodidad y una experiencia similar a la de una consola. Steam Deck tiene una interfaz intuitiva dise√±ada expresamente para sus controles de mando. Tanto el software como el sistema operativo se crearon a medida para Steam Deck, lo cual hace que este dispositivo sea la forma m√°s f√°cil de empezar a jugar en PC.
    
    </div>
    </br></br>
    """, unsafe_allow_html=True)

    st.markdown("""
                <h3 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>VALVE INDEX</h3>""" ,unsafe_allow_html=True) 
    
    # Primero, convierte la imagen a base64
    with open("imgs/valveindex.jpg", "rb") as img_file:
        b64_string = base64.b64encode(img_file.read()).decode()

    # Luego, incluye la imagen en tu bloque de Markdown usando una etiqueta <img>
    st.markdown(f"""
    <div style="border-bottom-left-radius: 10px; 
    border-bottom-right-radius: 10px; 
    padding: 20px; 
    text-align: justify; 
    background-color: #131720; 
    color: #FFFFFF; 
    font-family: Roboto;">
    <img src="data:image/jpeg;base64,{b64_string}" 
    style="border-radius: 10px; 
    display: block; 
    margin-left: auto; 
    margin-right: auto; 
    padding-bottom: 20px;
    width: 450px;
    height: 300px;">
    Valve Index es un sistema de realidad virtual dise√±ado por Valve Corporation, empresa responsable de la plataforma de distribuci√≥n de videojuegos Steam.‚Äã El sistema fue anunciado oficialmente a finales de abril de 2019, y sali√≥ a la venta el junio del mismo a√±o a un precio inicial de 999 d√≥lares. 
    </div>
    </br>
    """, unsafe_allow_html=True)
    
    # INTRO SIDEBAR
    
    intro_sidebar = False
    if(st.button("Valve")):
        intro_sidebar = True
        if intro_sidebar:
            with st.sidebar:
                st.sidebar.image('imgs/Valve_logo.svg')
                st.write("Valve Corporation, tambi√©n conocido como Valve Software, es una empresa estadounidense desarrolladora de videojuegos. Se hizo mundialmente famosa por su primer juego, Half-Life y por una modificaci√≥n de este, Counter-Strike.")
                st.write("Otros de sus logros m√°s famosos son la creaci√≥n del motor de videojuego Source, utilizado en gran parte de sus videojuegos, incluyendo Half-Life 2, Portal, Team Fortress 2, Left 4 Dead, Left 4 Dead 2 y Dota 2 y la creaci√≥n de la plataforma digital de videojuegos Steam. Las oficinas centrales de Valve Software se encuentran en Bellevue, Washington, Estados Unidos.")
                st.write("Valve fue fundada en 1996 por Gabe Newell y Mike Harrington. Ambos eran trabajadores del gigante inform√°tico Microsoft y hab√≠an trabajado en sus sistemas operativos Windows y OS/2 antes de pasarse al mundo de los videojuegos.")
                st.sidebar.image('imgs/valve.jpg')
        if st.button("Ocultar info de Valve"):
            intro_sidebar = False

# CONTENT AN√ÅLISIS INICIAL
if selected_menu_option =="An√°lisis inicial üìä":
    
    st.image("graphs/3.png", width=700)      
    st.image("graphs/1.png", width=700)
    st.image("graphs/2.png", width=700)
    st.image("graphs/4.png", width=700)
    st.image("graphs/5.png", width=700)
    st.image("graphs/6.png", width=700)
    st.image("graphs/7.png", width=700)
    
    # SIDEBAR
    with st.sidebar:
            st.title("Microsoft actualizar√° Windows 11 con una funci√≥n de IA para mejorar el rendimiento de los juegos")
            st.sidebar.image('imgs/windows.jpg')
            st.header("Ser√° una herramienta de reescalado y suavizado de texturas similar a NVIDIA DLSS o AMD FSR y llegar√° para darnos unos FPS extra en los juegos que sean compatibles")
            st.write("Mientras esperamos a que Microsoft nos d√© noticias sobre la nueva estrategia de Xbox esta misma semana, los de Redmnond trabajan en paralelo en muchas otras cosas, algunas relacionadas tambi√©n con el mundo de los videojuegos como una nueva herramienta que va a llegar pr√≥ximamente a windows 11.")
            st.write("Y es que la pr√≥xima gran actualizaci√≥n para el sistema operativo, la 24H2 llegar√° cargada de nuevas funciones basadas en IA, muchas de ellas pensadas para dar m√°s posibilidades a Copilot aunque, entre todas, encontramos una nueva tecnolog√≠a basada IA que servir√° para mejorar el rendimiento de ciertos juegos.")
            st.write("Esta funci√≥n se trata de Auto Super Resolution y ya ha podido verse en la √∫ltima versi√≥n beta de Windows 11.")
            st.markdown("[NOT√çCIA COMPLETA](https://vandal.elespanol.com/noticia/1350769070/microsoft-actualizara-windows-11-con-una-funcion-de-ia-para-mejorar-el-rendimiento-de-los-juegos/)", unsafe_allow_html=True)
    
    
    
if selected_menu_option =="Gr√°ficos avanzados üìà":

    HtmlFile = open("graphs/7.html", 'r', encoding='utf-8') 
    source_code = HtmlFile.read() 
    style = """
    <style>
        body {
            margin: 0 !important;
            padding: 0 !important;
            overflow: hidden;
            background-color: #111111;
        }
    </style>
    """
    source_code_with_style = style + source_code
    components.html(source_code_with_style, width=700, height=500)
    
    HtmlFile = open("graphs/8.html", 'r', encoding='utf-8') 
    source_code = HtmlFile.read() 
    style = """
    <style>
        body {
            margin: 0 !important;
            padding: 0 !important;
            overflow: hidden;
            background-color: #111111;
        }
    </style>
    """
    source_code_with_style = style + source_code
    components.html(source_code_with_style, width=700, height=500)
    
    HtmlFile = open("graphs/9.html", 'r', encoding='utf-8') 
    source_code = HtmlFile.read() 
    style = """
    <style>
        body {
            margin: 0 !important;
            padding: 0 !important;
            overflow: hidden;
            background-color: #111111;
        }
    </style>
    """
    source_code_with_style = style + source_code
    components.html(source_code_with_style, width=700, height=500)
    
    HtmlFile = open("graphs/10.html", 'r', encoding='utf-8') 
    source_code = HtmlFile.read() 
    style = """
    <style>
        body {
            margin: 0 !important;
            padding: 0 !important;
            overflow: hidden;
            background-color: #111111;
        }
    </style>
    """
    source_code_with_style = style + source_code
    components.html(source_code_with_style, width=700, height=500)
    
     
    HtmlFile = open("graphs/12.html", 'r', encoding='utf-8') 
    source_code = HtmlFile.read() 
    style = """
    <style>
        body {
            margin: 0 !important;
            padding: 0 !important;
            overflow: hidden;
            background-color: #111111;
        }
    </style>
    """
    source_code_with_style = style + source_code
    components.html(source_code_with_style, width=700, height=500)
     
    HtmlFile = open("graphs/13.html", 'r', encoding='utf-8') 
    source_code = HtmlFile.read() 
    style = """
    <style>
        body {
            margin: 0 !important;
            padding: 0 !important;
            overflow: hidden;
            background-color: #111111;
        }
    </style>
    """
    source_code_with_style = style + source_code
    components.html(source_code_with_style, width=700, height=500)
    
    HtmlFile = open("graphs/14.html", 'r', encoding='utf-8') 
    source_code = HtmlFile.read() 
    style = """
    <style>
        body {
            margin: 0 !important;
            padding: 0 !important;
            overflow: hidden;
            background-color: #111111;
        }
    </style>
    """
    source_code_with_style = style + source_code
    components.html(source_code_with_style, width=700, height=500)
    
if selected_menu_option == "Miner√≠a ‚õèÔ∏è":
    st.markdown("""<br><br>""", unsafe_allow_html=True)
    st.image("imgs/your_wordcloud2.png", width=700)
    
    
if selected_menu_option == "Predicci√≥n de √©xito ‚úî":
    with st.sidebar:
            st.title("Qu√©date gratis para siempre RPG Maker XP en Steam si lo reclamas antes del 19 de febrero")
            st.sidebar.image('imgs/noticias1.jpg')
            st.header("Festival de RPG Maker en Seam. La versi√≥n del motor RPG Maker XP para crear juegos de rol gratis para siempre")
            st.write("La creaci√≥n de juegos nunca ha sido tan sencilla como ahora gracias a varias herramientas. Una de las m√°s conocidas y difundidas es el motor RPG Maker, que celebra su d√≠a el 15 de febrero. El actual responsable de RPG Naker, Gotcha  Gotcha Games, ha organizado un festival en Steam con descuentos en las distintas versiones del motor y RPG Maker XP gratis si se compra hasta el 19 de  febrero.")
            st.write("RPG Maker XP sali√≥ en 2005 en Steam y con √©l se puede crear un juego de rol sin tener formaic√≥n previa. Incluye un conjunto b√°sico de gr√°ficos y sonidos que se pueden alterar y tambi√©n se pueden importar otros extremos.")
            st.markdown("[NOT√çCIA COMPLETA](https://vandal.elespanol.com/noticia/1350769090/quedate-gratis-para-siempre-rpg-maker-xp-en-steam-si-lo-reclamas-antes-del-19-de-febrero/)", unsafe_allow_html=True)
            
    
    videogames_data = pd.read_csv('data/videogames_eda.csv')
    videogames_data = videogames_data.loc[videogames_data['release_year'] > 2000]
    
    # Obtenemos listado de desarrolladores √∫nicos
    developers_list = videogames_data['developer'].unique().tolist()
    
    # Ordenamos el lsitado
    developers_list.sort()
    
        # Cargar el modelo entrenado
    with open('models/classsification_success.pkl', 'rb') as file:
        model = pickle.load(file)

    # Crear el formulario para recoger entradas del usuario
    with st.form("prediction_form"):
        st.write("Introduce los datos del videojuego:")
        positive = st.number_input('Reviews positivas', min_value=0)
        negative = st.number_input('Reviews negativas', min_value=0)
        average_forever = st.number_input('Media de tiempo jugado total', min_value=0)
        price = st.number_input('Precio', min_value=0.0)
        
        # Usar un selectbox para el campo 'developer'
        developer = st.selectbox('Desarrollador', developers_list)
        
        # Bot√≥n de env√≠o del formulario
        submit_button = st.form_submit_button(label="Predict")
    
        
    if submit_button:
        data = pd.DataFrame([[positive, negative, average_forever, price, developer]],
                            columns=['positive', 'negative', 'average_forever', 'price', 'developer'])
        
        # Hacer la predicci√≥n
        prediction = model.predict(data)
        
        # Mostrar el resultado
        if prediction[0] == 1:
            st.success("El videojuego ser√° exitoso!")
        else:
            st.error("El videojuego podr√≠a no ser exitoso.")
            
    # Aplicamos CSS personalizado para cambiar el color de fondo del formulario
    st.markdown("""
    <style>
    [data-testid="stForm"] {
        background-color: #131720;
    }
    </style>
    """, unsafe_allow_html=True)
    

if selected_menu_option =="Serie temporal üìÖ":

    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

    body {
        font-family: 'Roboto', sans-serif;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown("""
                <h3 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>Revisamos el promedio de los precios de los videojuegos por a√±o</h3>""" ,unsafe_allow_html=True) 
    
    
    HtmlFile = open("graphs/tu_gr√°fico.html", 'r', encoding='utf-8') 
    source_code = HtmlFile.read() 
    style = """
    <style>
        body {
            margin: 0 !important;
            padding: 0 !important;
            overflow: hidden;
            background-color: #111111;
        }
    </style>
    """
    source_code_with_style = style + source_code
    components.html(source_code_with_style, width=700, height=500)
    
    st.markdown("""
                <h3 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>Revisamos estacionariedad</h3>""" ,unsafe_allow_html=True) 
    
    st.image("graphs/serie1.png", width=700)
    
    st.markdown("""
                <h3 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>Diferenciamos</h3>""" ,unsafe_allow_html=True) 
    
    st.image("graphs/serie2.png", width=700)
    
    st.markdown("""
                <h3 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>Entrenamos modelo ARIMA y revisamos diagn√≥sticos</h3>""" ,unsafe_allow_html=True) 
    
    st.image("graphs/serie3.png", width=700)
    
    st.markdown("""
                <h3 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>Graficamos precios promedios de los videojuegos por a√±o</h3>""" ,unsafe_allow_html=True) 
    
    
    
    HtmlFile = open("graphs/stemporal.html", 'r', encoding='utf-8') 
    source_code = HtmlFile.read() 
    style = """
    <style>
        body {
            margin: 0 !important;
            padding: 0 !important;
            overflow: hidden;
            background-color: #111111;
        }
    </style>
    """
    source_code_with_style = style + source_code
    components.html(source_code_with_style, width=700, height=500)
    
    
    
    HtmlFile = open("graphs/stemporal2.html", 'r', encoding='utf-8') 
    source_code = HtmlFile.read() 
    style = """
    <style>
        body {
            background-color: #111111;
        }
    </style>
    """
    source_code_with_style = style + source_code
    components.html(source_code_with_style, width=700, height=500)


if selected_menu_option == "Predicci√≥n de precio üíµ":
    with st.sidebar:
        st.title("Hogwarts Legacy repite como juego m√°s vendido durante la √∫ltima semana en Reino Unido")
        st.sidebar.image('imgs/hogwarts.jpg')
        st.header("Fue el juego m√°s vendido en 2023 y todav√≠a se mantiene como uno de los √©xitos de la temporada.")
        st.write("Hogwarts Legacy vuelve al primer puesto de ventas semanales f√≠sicas en Reino Unido, desplazando a Suicide Suad: Kill the Justice League -anterior n√∫mero uno- al tercer puesto.")
        st.write("El RPG de acci√≥n ha cumplido un a√±o desde su debut y en este tiempo se ha convertido en el m√°s vendido de 2023.")
        st.markdown("[NOTICIA COMPLETA](https://vandal.elespanol.com/noticia/1350769071/hogwarts-legacy-repite-como-juego-mas-vendido-durante-la-ultima-semana-en-reino-unido/)", unsafe_allow_html=True)
    
    # Cargar el modelo entrenado
    with open('models/regression_price.pkl', 'rb') as file:
        model = pickle.load(file)
    
    videogames_data = pd.read_csv('data/videogames_eda.csv')
    videogames_data = videogames_data.loc[videogames_data['release_year'] > 2000]
    
    # Obtenemos listado de desarrolladores √∫nicos
    developers_list = videogames_data['developer'].unique().tolist()
    developers_list.sort()
    
    # Definir las columnas num√©ricas que queremos escalar basadas en tu entrenamiento
    variables_to_scale = ['positive', 'negative', 'average_forever', 'owners_max', 'release_year']
    
    scaler = StandardScaler()
    videogames_data[variables_to_scale] = scaler.fit_transform(videogames_data[variables_to_scale])

    
    # Crear el formulario para recoger entradas del usuario
    with st.form("prediction_form"):
        st.write("Introduce los datos del videojuego:")
        positive = st.number_input('Reviews positivas', min_value=0)
        negative = st.number_input('Reviews negativas', min_value=0)
        average_forever = st.number_input('Media total de tiempo jugado', min_value=0)
        owners_max = st.number_input('N¬∫ de propietarios m√°ximo', min_value=0)
        release_year = st.number_input('A√±o de lanzamiento', min_value=2000, max_value=2026, step=1)
        developer = st.selectbox('Desarrollador', developers_list)
        submit_button = st.form_submit_button("Predicci√≥n")
        
    
    if submit_button:
        input_df = pd.DataFrame([[positive, negative, average_forever, owners_max, release_year]],
                            columns=['positive', 'negative', 'average_forever', 'owners_max', 'release_year'])
    
        input_df[developer] = 1
        
        # Asegurar que todas las otras columnas de 'developer' est√©n presentes y tengan valor 0
        for dev in developers_list:
            if dev not in input_df.columns:
                input_df[dev] = 0

        # Escalar las variables num√©ricas
        input_df[variables_to_scale] = scaler.transform(input_df[variables_to_scale])
    
         # Asegurar el orden correcto de las columnas como se entren√≥ el modelo
        input_df = input_df.reindex(columns=model.feature_names_in_, fill_value=0)
    
        # Hacer la predicci√≥n
        prediction = model.predict(input_df)
        
        # Mostrar el resultado
        st.write(f'El precio predicho del videojuego es: ‚Ç¨{prediction[0]:.2f}')
    
    st.markdown("""
    <style>
    [data-testid="stForm"] {
        background-color: #131720;
    }
    </style>
    """, unsafe_allow_html=True)

if selected_menu_option =="Power BI „ÄΩÔ∏è":
    
    st.markdown("""<br>""", unsafe_allow_html=True)
    
    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

    body {
        font-family: 'Roboto', sans-serif;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown("""
                <h2 style='text-align: center;  
                background-color: #131720; 
                font-family: Roboto;
                border-top-left-radius: 10px; 
                border-top-right-radius: 10px;
                '>PANEL POWER BI</h2>""" ,unsafe_allow_html=True) 
    
    st.markdown("""
        <div "style=margin: auto;
        background-color: #131720;">
            <iframe title="videogames" width="100%" height="500" background-color: #131720 src="https://app.powerbi.com/view?r=eyJrIjoiNjdjMWQxZmUtMzJmOS00NzlhLWIyMTUtMzY5Mjg5ZDMxNTEyIiwidCI6IjhhZWJkZGI2LTM0MTgtNDNhMS1hMjU1LWI5NjQxODZlY2M2NCIsImMiOjl9" frameborder="0" allowFullScreen="true" &navContentPaneEnabled=false>
            </iframe>
        </div>
        """,
        unsafe_allow_html=True,
    )

    
  
    
    
